Author: Hue Moua
Class: CPE159_OperatingSystemPragmatics
Instructor: Dr. Peng Kang
Assignment: Phase0 Part4 Debugging
Date: August 31, 2025

-----------------------------------------------------------------------
Step1: Implement the strlen function
int strlen(char *str){
    int slen = 0;
    for(int i=0;;i++)
    {
        if(str[i]=='\0') break;
        else slen++;
    }
    return slen;
}

-----------------------------------------------------------------------
Step2: Debug
$ make
Done linking "build/HMOS.dli" (with GDB enabled) at 1m.

$ make debug
Done linking "build/HMOS.dli" (with GDB enabled) at 1m.
The SPEDE Target will be reset, are you sure? (y/n) y
Resetting the SPEDE Target...
Downloading image 'build/HMOS.dli' to SPEDE Target via /dev/pts/3...
File type is 'ELF'
Total blocks to download:  0x83  (128 bytes each)

Load Successful ; Code loaded at 0x0x101000 (4208 bytes/sec)
Executing the image 'build/HMOS.dli' on the SPEDE Target with GDB Enabled
Launching GDB...
Reading symbols from build/HMOS.dli...
Expanding full symbols from build/HMOS.dli...
Remote debugging using /dev/pts/3
0x00102691 in breakpoint ()
Temporary breakpoint 1 at 0x101213: file src/main.c, line 41.

Temporary breakpoint 1, main () at src/main.c:41
41	    char buf[128] = {0};

SPEDE GDB$ continue
Continuing.
Hello, world!
Welcome to HMOS!
NULL pointer!
The buffer size is 17 bytes
NULL pointer!
CPE/CSC 159 for Spring/Fall 2025 will be fun!
[Inferior 1 (Remote target) exited normally]

SPEDE GDB$ quit

-----New Run-------
$ make debug
Done linking "build/HMOS.dli" (with GDB enabled) at 1m.
The SPEDE Target will be reset, are you sure? (y/n) y
Resetting the SPEDE Target...
Downloading image 'build/HMOS.dli' to SPEDE Target via /dev/pts/3...
File type is 'ELF'
Total blocks to download:  0x83  (128 bytes each)

Load Successful ; Code loaded at 0x0x101000 (5610 bytes/sec)
Executing the image 'build/HMOS.dli' on the SPEDE Target with GDB Enabled
Launching GDB...
Reading symbols from build/HMOS.dli...
Expanding full symbols from build/HMOS.dli...
Remote debugging using /dev/pts/3
0x00102691 in breakpoint ()
Temporary breakpoint 1 at 0x101213: file src/main.c, line 41.

Temporary breakpoint 1, main () at src/main.c:41
41	    char buf[128] = {0};
SPEDE GDB$ break puts
Breakpoint 2 at 0x1011a8: file src/main.c, line 25.
SPEDE GDB$ info break
Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x001011a8 in puts at src/main.c:25

SPEDE GDB$ continue
Continuing.
Hello, world!
Welcome to HMOS!

Breakpoint 2, puts (str=0x10423b "Hello, World!\n") at src/main.c:25
25	    if (str) {

SPEDE GDB$ list
20	/**
21	 * Prints a string to the screen starting at 0, 0
22	 * @param str pointer to the string to print
23	 */
24	void puts(char *str) {
25	    if (str) {
26	        printf("NULL pointer!\n");
27	        return;
28	    }
29

SPEDE GDB$ print str
$1 = 0x10423b "Hello, World!\n"

SPEDE GDB$ step
26	        printf("NULL pointer!\n");

SPEDE GDB$ step
NULL pointer!
27	        return;

SPEDE GDB$ continue
Continuing.
The buffer size is 17 bytes

Breakpoint 2, puts (str=0x10dfc "welcome to HMOS!\n") at src/main.c:25
25	    if (str) {

SPEDE GDB$ jump +3
Continuing at 0x1011c0.
CPE/CSC 159 for Spring/Fall 2025 will be fun!
[Inferior 1 (Remote target) exited normally]

-----New Run-------
$ make debug
Done linking "build/HMOS.dli" (with GDB enabled) at 1m.
The SPEDE Target will be reset, are you sure? (y/n) y
Resetting the SPEDE Target...
Downloading image 'build/HMOS.dli' to SPEDE Target via /dev/pts/5...
File type is 'ELF'
Total blocks to download:  0x83  (128 bytes each)

Load Successful ; Code loaded at 0x0x101000 (3366 bytes/sec)
Executing the image 'build/HMOS.dli' on the SPEDE Target with GDB Enabled
Launching GDB...
Reading symbols from build/HMOS.dli...
Expanding full symbols from build/HMOS.dli...
Remote debugging using /dev/pts/5
0x00102695 in breakpoint ()
Temporary breakpoint 1 at 0x101216: file src/main.c, line 41.

Temporary breakpoint 1, main () at src/main.c:41
41	    char buf[128] = {0};
SPEDE GDB$ break strlen
Breakpoint 2 at 0x101178: file src/main.c, line 10.
SPEDE GDB$ break puts
Breakpoint 3 at 0x1011a8: file src/main.c, line 25.
SPEDE GDB$ info break
Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x00101178 in strlen at src/main.c:10
3       breakpoint     keep y   0x001011a8 in puts at src/main.c:25
SPEDE GDB$ continue
Continuing.
Hello, world!
Welcome to HMOS!

Breakpoint 3, puts (str=0x10423f "Hello, World!\n") at src/main.c:25
25	    if (!*str) {
SPEDE GDB$ continue
Continuing.

Breakpoint 2, strlen (str=0x10423f "Hello, World!\n") at src/main.c:10
10	    int slen = 0;
SPEDE GDB$ backtrace
#0  strlen (str=0x10423f "Hello, World!\n") at src/main.c:10
#1  0x001011ce in puts (str=0x10423f "Hello, World!\n") at src/main.c:30
#2  0x00101275 in main () at src/main.c:49
SPEDE GDB$ info args
str = 0x10423f "Hello, World!\n"
SPEDE GDB$ info break
Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x00101178 in strlen at src/main.c:10
	breakpoint already hit 1 time
3       breakpoint     keep y   0x001011a8 in puts at src/main.c:25
	breakpoint already hit 1 time
SPEDE GDB$ delete 2
SPEDE GDB$ delete 3
SPEDE GDB$ info break
No breakpoints or watchpoints.
SPEDE GDB$ break main.c:53
Breakpoint 6 at 0x1012b9: file src/main.c, line 53.
SPEDE GDB$ break main.c:55
Breakpoint 7 at 0x1012cb: file src/main.c, line 55.
SPEDE GDB$ break info
Function "info" not defined.
SPEDE GDB$ info break
Num     Type           Disp Enb Address    What
6       breakpoint     keep y   0x001012b9 in main at src/main.c:53
7       breakpoint     keep y   0x001012cb in main at src/main.c:55
SPEDE GDB$ continue
Continuing.
The buffer size is 17 bytes

Breakpoint 6, main () at src/main.c:53
53	    puts(buf);
SPEDE GDB$ print buf
$1 = "welcome to HMOS!\n", '\000' <repeats 110 times>
SPEDE GDB$ set buf[0] = 'W'
SPEDE GDB$ print buf
$2 = "Welcome to HMOS!\n", '\000' <repeats 110 times>
SPEDE GDB$ continue
Continuing.

Breakpoint 7, main () at src/main.c:55
55	    printf("CPE/CSC 159 for Spring/Fall %d will be fun!\n", year);
SPEDE GDB$ print year
$3 = 0x7b2
SPEDE GDB$ print/d year
$4 = 1970
SPEDE GDB$ set year=2023
SPEDE GDB$ print/d year
$6 = 8227
SPEDE GDB$ print year
$7 = 0x2023
SPEDE GDB$ set year=2025.
SPEDE GDB$ print/d year
$8 = 2025
SPEDE GDB$ continue
Continuing.
CPE/CSC 159 for Spring/Fall 2025 will be fun!
[Inferior 1 (Remote target) exited normally]
